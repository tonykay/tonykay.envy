#!/bin/bash

# Setup vars

VIRTUALENV_HOME=/opt/envy/venv-envy
NUM_ARGS=$#
ACTION=$1
OBJECT=$2
TARGET=$3

usage ()
{
  echo "USAGE: nv <action> <object> <extras>"
  echo

  echo "nv add <environment> <addon>            Add extra instance(s)"
  echo "nv clean                                Clean up old resources"
  echo "nv deploy <environment>                 Deploy an Environment"
  echo "nv delete <environment>                 Delete an Environment"
  echo "nv fromfile <filename>                  Deploy an Environment from a file"
  echo "nv list                                 List running infrastucture"
  echo "nv login <target>                       Login to any instance with bash shell"
  echo "nv redeploy <environment>               Destroy and Redeploy an Environment"
#  echo "nv remove <environment>  <target>       Remove an instance from a Environment"
  echo "nv replace <environment>  <target>      Destroy and Redeploy an Environment"
  echo "nv setup                                Reconfigure nv"
  return
}

process_cmd_line ()
{
  if [ $NUM_ARGS -eq 0 ]; 
  then
    usage
    exit 2
  fi
}  

setup_nv_parameters ()
{
  TIMESTAMP=$(date +"%Y-%m-%d_%H-%M-%S")        # For logfile identification
}

activate_virtualenv ()
{
  if [ -f "$VIRTUALENV_HOME"/bin/activate ];
  then
    source /opt/envy/venv-envy/bin/activate
  fi
}

cmd_list ()
{
  echo
  docker network list --format "table {{.Name}}" | egrep -v "^bridge$|^host$|^none$" | sed 's/^NAME$/DOMAINS/'
  echo
  docker ps --format "table {{.Names}}\\t{{.Image}}\\t{{.Status}}" | sed 's/IMAGE   /INSTANCE/'
  echo
}

cmd_default ()
{
ansible-playbook \
  ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/"${1}".yml \
  -e "envy=${2}" # -e @${ENVY_PATH}/playbooks/vars/addons/"${3}".yml
}

cmd_add ()
{
ansible-playbook \
  ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/"${1}".yml \
  -e "envy=${2}" -e @~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/vars/addons/"${3}".yml
}

cmd_setup ()
{
   ansible-playbook ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/setup.yml
}

cmd_update ()     # Update envy and other dependencies
{
   ansible-galaxy install -r ~/.ansible/collections/requirements.yml --force-with-deps
}  

cmd_fromfile ()     # Update envy and other dependencies
{
   ansible-playbook ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/deploy.yml -e @"$OBJECT"
}  

cmd_replace ()     # Replace an instance
{
  ansible-playbook \
  ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/replace.yml \
  -e "envy=${OBJECT}" -e  "envy_replacement_target=${TARGET}"

}  

cmd_remove ()     # Remove an instance
{
  ansible-playbook \
  ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/remove.yml \
  -e "envy=${OBJECT}" -e  "envy_replacement_target=${TARGET}"
  cmd_clean
}  

cmd_login ()     # Update envy and other dependencies
{
  docker exec -it $1 bash
}  
cmd_clean ()     # Update envy and other dependencies
{
  docker network prune -f
  docker container prune -f
}  

process_cmd_line
setup_nv_parameters
activate_virtualenv

# cd  ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks

case "$ACTION" in
  add)
    cmd_add deploy $2 $3
    ;;
  clean)
    cmd_clean
    ;;
  deploy | delete | redeploy)
    cmd_default $1 $2
    ;;
  fromfile)
    cmd_fromfile
    ;;
  list)
    cmd_list
    ;;
  login)
    cmd_login "$OBJECT"
    ;;
  remove)
    cmd_remove
    ;;
  replace)
    cmd_replace 
    ;;
  setup)
    cmd_setup
    ;;
  update)
    cmd_update
    ;;
  *)
    # echo $"Usage: $0 {start|stop|restart|condrestart|status}"
    usage
    exit 1
     
esac

#ansible-playbook \
#  ~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/"${1}".yml \
#  -e "envy=${2}" # \
  # -e @~/.ansible/collections/ansible_collections/tonykay/envy/playbooks/vars/"${ENVIRONMENT}"/defauts

# 2> /tmp/warnings \
#  | tee /tmp/log | sed -n -e 's/.*ENVY_USER_OUTPUT//' -e 's/\"$//p'


