---
- name: Create a container based ssh based lab environment - e.g. for Ansible
  hosts: localhost
  connection: local
  gather_facts: true
  vars:

    envy_name:                    multi
    envy_labels:
      - env_type: multi

  tasks:


    - name: Identify and capture all containers in an env
      community.general.docker_host_info:
        containers: true
        containers_filters:
          label: "env_name={{ envy_name }}"
      register: r_env_containers    

       
#    - name: Copy out register
#      copy:
#        content: "{{ r_env_containers | to_nice_json }}"
#        dest: running_containers.json

#    - name: Output containers
#      debug:
#        var: __container.Names[0] | regex_replace('\/', '')
#      loop: "{{ r_env_containers.containers }}"
#      loop_control:
#        loop_var: __container
#        label: "{{ __container.Names[0] }}"

    - name: Create individual env instances
      community.docker.docker_container:
        name:       "{{ __container.Names[0] | regex_replace('\/', '') }}"
        state:      absent
      become: "{{ 'no' if ansible_system == 'Darwin' else 'yes' }}"
      loop: "{{ r_env_containers.containers }}"
      loop_control:
        loop_var: __container
        label: "{{ __container.Names[0] | regex_replace('\/', '') }}"


      #"labels:env_name": "multi"
#          #label: "env_type:multi"

#   - name: Create network(s)
#      community.docker.docker_network:
#        name:             "{{ __network.name }}"
#        #        state:            present
#        labels:           "{{ envy_labels }}"
#      loop: "{{ envy_networks }}"
#      loop_control:
#        loop_var: __network
#      become: "{{ 'no' if ansible_system == 'Darwin' else 'yes' }}"
#      tags:
#        - network
#        - networking
#
#    - name: Create individual env instances
#      community.docker.docker_container:
#        #        name:             "{{ __env_container.name }}"
#        # state:            present
##        hostname:         "{{ __container.hostname            | default( __env_container.name) }}"
##        image:            "{{ __env_container.image           | default(envy_default_image) }}"
##        privileged:       "{{ __env_container.privileged      | default(true) }}"
##        published_ports:  "{{ __env_container.published_ports | default([]) }}"
##        networks:         "{{ __env_container.networks        | default([{ 'name': envy_networks[0].name}]) }}"
##        volumes:          "{{ __env_container.volumes         | default(omit) }}"
#        labels:           "{{ envy_labels }}"
##        env:
##          SSH_SUDO:         ALL=(ALL) NOPASSWD:ALL
##          SSH_USER:         "{{ envy_ssh_user | default('vagrant') }}"
#      loop: "{{ envy_instances }}"
#      loop_control:
#        loop_var: __env_container
#        label: "{{ __env_container.name }}"
#      become: "{{ 'no' if ansible_system == 'Darwin' else 'yes' }}"
#      tags:
#        - instances
#        - containers
#        - inventory
#      register: r_container_info
#
#    - name: Debug output register r_container_info
#      debug:
#        verbosity: 2
#        msg:
#          - "name is {{ __container.__env_container.name }}"
#          - "group is {{ __container.__env_container.group }}"
#          - "IP is {{ __container.container.NetworkSettings.Networks[envy_networks[0].name].IPAddress }}"
#          #        - "Port map is {{ __container.container.NetworkSettings.Ports['22/tcp'][0].HostPort }}"
#      loop: "{{ r_container_info.results }}"
#      loop_control:
#        loop_var: __container
#        label: "{{ __container.__env_container.name }}"
#      tags:
#        - inventory
#
#    - name: Debug output register r_container_info as json file
#      copy:
#        content:  "{{ r_container_info | to_nice_json }}"
#        dest:     "/tmp/container-{{ envy_name }}-info.json"
#        mode:     "0644"
#      tags:
#        - inventory
#
#    - name: Generate in-memory inventory
#      add_host:
#        name:             "{{ __container.__env_container.name }}"
#        shortname:        "{{ __container.__env_container.name }}"
#        mac_ansible_ssh_host: localhost
#        linux_ansible_ssh_host: "{{ __container.container.NetworkSettings.Networks[envy_networks[0].name].IPAddress }}"
#        group:            "{{ __container.__env_container.group }}"
#        ansible_ssh_port: "{{ __container.container.NetworkSettings.Ports['22/tcp'][0].HostPort }}"
#      loop: "{{ r_container_info.results }}"
#      loop_control:
#        label: "{{ __container.__env_container.name }}"
#        loop_var: __container
#      tags:
#        - inventory
#
#    - name: Create env directory structure and files
#      import_role:
#        name: tonykay.envy.envy_manage_host_envy_configuration
#      tags:
#        - host-config
#
#...
